A* algorithm
- The implementation of A* Algorithm involves maintaining two lists- OPEN and CLOSED.
- OPEN contains those nodes that have been evaluated by the heuristic function but have not been expanded into successors yet.
- CLOSED contains those nodes that have already been visited.

Step-01:
- Define a list OPEN.
- Initially, OPEN consists solely of a single node, the start node S.
Step-02:
- If the list is empty, return failure and exit.
Step-03:
- Remove node n with the smallest value of f(n) from OPEN and move it to list CLOSED.
- If node n is a goal state, return success and exit.
Step-04:
- Expand node n.
Step-05:
- If any successor to n is the goal node, return success and the solution by tracing the path from goal node to S.
- Otherwise, go to Step-06.
Step-06:
- For each successor node,
- Apply the evaluation function f to the node.
- If the node has not been in either list, add it to OPEN.
Step-07:
- Go back to Step-02.


-------------------------------------------------------
# class to represent a graph object
class Graph:
 
    # Constructor
    def __init__(self, edges, N):
 
        self.adj = [[] for _ in range(N)]
 
        # add edges to the undirected graph
        for (src, dest) in edges:
            self.adj[src].append(dest)
            self.adj[dest].append(src)
 
-------------------------------------------------------
# Function to assign colors to vertices of graph
def colorGraph(graph):
 
    # stores color assigned to each vertex
    result = {}
 
    # assign color to vertex one by one
    for u in range(N):
 
        # set to store color of adjacent vertices of u
        # check colors of adjacent vertices of u and store in set
        assigned = set([result.get(i) for i in graph.adj[u] if i in result])
 
        # check for first free color
        color = 1
        for c in assigned:
            if color != c:
                break
            color = color + 1
 
        # assigns vertex u the first available color
        result[u] = color
 
    for v in range(N):
        print("Color assigned to vertex", v, "is", colors[result[v]])
    print("Not rules are violated")

---------------------------------------------------------------------
# Greedy coloring of graph
if __name__ == '__main__':
 
    # Add more colors for graphs with many more vertices
    colors = [ "BLUE", "GREEN", "RED", "YELLOW", "ORANGE"]
 
    #  of graph edges as per above diagram
    edges = [(0, 1), (0, 4), (0, 5), (4, 5), (1, 4), (1, 3), (2, 3), (2, 4)]
 
    # Set number of vertices in the graph
    N = 6
 
    # create a graph from edges
    graph = Graph(edges, N)
 
    # color graph using greedy algorithm
    colorGraph(graph)

-------------------------------------------------------------------